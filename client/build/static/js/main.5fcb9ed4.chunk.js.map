{"version":3,"sources":["stores/Routes.js","components/RequestTemplate.js","components/RoutesList.js","App.js","serviceWorker.js","index.js"],"names":["RoutesClass","data","_this","this","axios","post","then","res","getRoutes","showNotification","catch","e","response","result","routes","filter","item","method","map","Object","objectSpread","methods","observable","action","get","_this2","computed","groupId","delete","concat","_this3","_this4","statusText","message","notification","open","description","status","Option","Select","FormItem","Form","Item","RequestTemplate","observer","props","_props$form","form","getFieldDecorator","routeError","getFieldError","react_default","a","createElement","es_form","layout","onSubmit","preventDefault","validateFields","err","values","addRoute","resetFields","validateStatus","help","initialValue","rules","required","pattern","min","input","addonBefore","style","marginTop","marginBottom","valuePropName","es_select","width","value","getFieldsValue","itemType","es_checkbox","tooltip","title","icon","marginLeft","type","es_button","htmlType","create","Panel","Collapse","RoutesList","itemsForTable","toJS","config","key","route","columns","dataIndex","render","text","className","align","color","record","popconfirm","onConfirm","removeRoute","react","table","bordered","pagination","dataSource","onClick","removeAllRoutes","collapse","header","Header","Layout","Content","Footer","App","padding","background","minHeight","components_RequestTemplate","components_RoutesList","Component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5fcb9ed4.chunk.js","sourcesContent":["import { observable, action, computed } from 'mobx';\r\nimport axios from 'axios';\r\nimport { notification } from 'antd';\r\n\r\nclass Routes {\r\n    @observable routes = [];\r\n    @action getRoutes = () => {\r\n        return axios\r\n            .get('http://localhost:8000/mockServer')\r\n            .then(res => this.routes = res.data.routes ? res.data.routes : [])\r\n            .catch(e => this.showNotification(e.response))\r\n    }\r\n\r\n    @computed get itemsForTable() {\r\n\r\n        let result = this.routes.filter(item => {\r\n            return item.method === \"POST\"\r\n        })\r\n        result = result.map(item => {\r\n            return {\r\n                ...item,\r\n                methods: \"PUT, POST, GET, DELETE\"\r\n            }\r\n        })\r\n        return result\r\n    }\r\n\r\n    @action addRoute(data) {\r\n        axios\r\n            .post('http://localhost:8000/mockServer', data)\r\n            .then(res => {\r\n                this.getRoutes();\r\n                this.showNotification(res);\r\n            })\r\n            .catch(e => this.showNotification(e.response))\r\n    }\r\n\r\n    @action removeRoute = (groupId) => {\r\n        axios\r\n            .delete(`http://localhost:8000/mockServer?groupId=${groupId}`)\r\n            .then(res => {\r\n                this.getRoutes();\r\n                this.showNotification(res);\r\n            })\r\n            .catch(e => this.showNotification(e.response))\r\n    }\r\n\r\n    @action removeAllRoutes = () => {\r\n        axios\r\n            .delete('http://localhost:8000/mockServer')\r\n            .then(res => {\r\n                this.getRoutes();\r\n                this.showNotification(res);\r\n            })\r\n            .catch(e => this.showNotification(e.response))\r\n    }\r\n\r\n    @action showNotification = (res) => {\r\n        if(res.statusText === 'OK' && res.data.message){\r\n            notification.open({\r\n                message: 'Successful',\r\n                description: res.data.message,\r\n            });\r\n        } else {\r\n            notification.open({\r\n                message: res.status,\r\n                description: `${res.data}`,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nconst RoutesClass = new Routes();\r\nRoutesClass.getRoutes();\r\nexport default RoutesClass","import React from 'react';\r\nimport '../App.css';\r\nimport { Input, Checkbox, Select, Button, Icon, Tooltip, Form } from 'antd';\r\nimport { observer } from 'mobx-react';\r\nimport routes from '../stores/Routes';\r\nconst Option = Select.Option;\r\nconst FormItem = Form.Item;\r\n\r\nconst RequestTemplate = observer((props) => {\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                routes.addRoute(values);\r\n                props.form.resetFields();\r\n            }\r\n        });\r\n    }\r\n    const { getFieldDecorator, getFieldError } = props.form;\r\n    const routeError = getFieldError('route');\r\n    return (\r\n        <Form layout=\"inline\" onSubmit={handleSubmit}>\r\n            <h3>The route:</h3>\r\n\r\n            <FormItem\r\n                validateStatus={routeError ? 'error' : ''}\r\n                help={routeError || ''}\r\n            >\r\n                {getFieldDecorator('route', {\r\n                    initialValue: \"/\",\r\n                    rules: [\r\n                        { required: true, message: 'Please fill this field' },\r\n                        { pattern: /^([a-zA-Z0-9_/-]+)$/, message: 'Only allows a-z, A-Z, 0-9, Underscore, dash and slash' },\r\n                        { pattern: /^((?!mockServer).)*$/, message: 'Url cannot contain mockServer' },\r\n                        { pattern: /^[/]/, message: 'The route should start from /' },\r\n                        { min: 2, message: 'The path can\\'t be absoute' }\r\n                    ],\r\n                })(\r\n                    <Input addonBefore=\"http://localhost:8000\" />\r\n                )}\r\n            </FormItem>\r\n\r\n            <div style={{ marginTop: 20, marginBottom: 20 }}>\r\n                <h3>Select value type you want to store</h3>\r\n                <FormItem>\r\n                    {getFieldDecorator('itemType', {\r\n                        valuePropName: 'value',\r\n                        initialValue: 'single',\r\n                    })(\r\n                        <Select style={{ width: 120 }}>\r\n                            <Option value=\"single\">Single item</Option>\r\n                            <Option value=\"collection\">Collection</Option>\r\n                        </Select>\r\n                    )}\r\n                </FormItem>\r\n            </div>\r\n\r\n            <div style={{ marginTop: 20, marginBottom: 20 }}>\r\n                {\r\n                    props.form.getFieldsValue().itemType === \"collection\" &&\r\n                    <FormItem>\r\n                        {getFieldDecorator('changeByParam', {\r\n                            valuePropName: 'checked',\r\n                            initialValue: true,\r\n                        })(\r\n                            <Checkbox>\r\n                                I want to be able to change items in the collection\r\n                            <Tooltip title=\"If you will pass the id that already exists in the collection the new value will replace the old one.\">\r\n                                    <Icon style={{ marginLeft: 10 }} type=\"question-circle\" />\r\n                                </Tooltip>\r\n                            </Checkbox>\r\n                        )}\r\n                    </FormItem>\r\n                }\r\n\r\n            </div>\r\n\r\n            <div style={{ marginTop: 20, marginBottom: 20 }}>\r\n                <Button type=\"primary\" htmlType=\"submit\">Create route</Button>\r\n            </div>\r\n\r\n        </Form>\r\n    );\r\n});\r\n\r\nexport default Form.create()(RequestTemplate);","import React, { Fragment } from 'react';\r\nimport '../App.css';\r\nimport config from '../stores/Routes';\r\nimport { observer } from 'mobx-react';\r\nimport { toJS } from 'mobx';\r\nimport { Table, Popconfirm, Button, Icon } from 'antd';\r\nimport { Collapse } from 'antd';\r\nimport routes from '../stores/Routes';\r\n\r\nconst Panel = Collapse.Panel;\r\n\r\nconst RoutesList = observer(() => {\r\n    let itemsForTable = toJS(config.itemsForTable);\r\n    itemsForTable = itemsForTable.map(item => {\r\n        return {\r\n            ...item,\r\n            key: `${item.route + item.groupId}`\r\n        }\r\n    });\r\n\r\n    const columns = [{\r\n        title: 'Path',\r\n        dataIndex: 'route',\r\n        render: text => <span className=\"app-link\">{text}</span>,\r\n    }, {\r\n        title: 'Methods',\r\n        dataIndex: 'methods',\r\n    }, {\r\n        title: 'Data type',\r\n        dataIndex: 'itemType',\r\n    }, {\r\n        title: 'Change by id',\r\n        dataIndex: 'changeByParam',\r\n        align: 'center',\r\n        render: item => (\r\n            item === true ? <Icon type=\"check\" style={{color: 'green'}} /> : <Icon type=\"stop\" style={{color: 'red'}}/>\r\n        )\r\n    }, {\r\n        title: 'Operation',\r\n        dataIndex: 'operation',\r\n        render: (text, record) => {\r\n            return (\r\n                <Popconfirm title=\"Sure to delete?\" onConfirm={() => routes.removeRoute(record.groupId)}>\r\n                    <span className=\"app-link\">Delete</span>\r\n                </Popconfirm>\r\n            );\r\n        },\r\n    }]\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <Table\r\n                columns={columns}\r\n                bordered\r\n                pagination={false}\r\n                dataSource={itemsForTable}\r\n            />\r\n            <Button type=\"danger\" style={{ marginTop: 20 }} onClick={() => routes.removeAllRoutes()}>Delete all</Button>\r\n            <Collapse style={{ marginTop: 30 }}>\r\n                <Panel header=\"How to use POST/PUT method\" key=\"1\">\r\n                    <p>To save the data you need to attach the body to request.</p>\r\n                    <p>You can change item in the collection by sending item with existing id in case \"Change by id\" option is selected,<br/>\r\n                    otherwise, the new item will replace the old one.</p>\r\n                </Panel>\r\n                <Panel header=\"How to use GET method\" key=\"2\">\r\n                    <p>You can filter the data to get only needed items.</p>\r\n                    <p>For example request with ?name=Joe will return only items with name Joe.</p>\r\n                    <p>You can pass a few URL parameters like this: /users?firstName=Joe&lastName=Doe&city=Paris</p>\r\n                </Panel>\r\n                <Panel header=\"How to use DELETE method\" key=\"3\">\r\n                    <p>If you use collection data type you should add URL parameter id to delete specific entry.</p>\r\n                    <p>In case you selected \"Single item\" you can use DELETE request without any parameters.</p>\r\n                </Panel>\r\n            </Collapse>\r\n        </Fragment>\r\n    )\r\n});\r\n\r\nexport default RoutesList;","import React, { Component } from 'react';\nimport RequestTemplate from './components/RequestTemplate';\nimport RoutesList from './components/RoutesList';\nimport { Layout } from 'antd';\nconst { Header, Content, Footer } = Layout;\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout className=\"layout\">\n        <Header><h1 style={{color: \"#fff\"}}>EasyCRUD</h1></Header>\n        <Content style={{ padding: '0 50px' }}>\n          <div style={{ background: '#fff', padding: 24, minHeight: 280 }}>\n            <RequestTemplate />\n            <RoutesList />\n          </div>\n        </Content>\n        <Footer />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}